from iiif.static import IIIFStatic\nfrom IIIFpres import iiifpapi3\nfrom PIL import Image\nimport os\nfrom pdf2image import convert_from_path\nfrom iiif_prezi.factory import ManifestFactory\nimport yaml\n\nfiles = [('images/Screenshot20230424at45014PM.png', 'Screenshot 2023-04-24 at 4.50.14 PM'), ('images/Screenshot20230508at15632PM.png', 'Screenshot 2023-05-08 at 1.56.32 PM'), ('images/Screenshot20230509at124517PM.png', 'Screenshot 2023-05-09 at 12.45.17 PM'), ('images/Screenshot20230510at84214AM.png', 'Screenshot 2023-05-10 at 8.42.14 AM'), ('images/Screenshot20230510at84222AM.png', 'Screenshot 2023-05-10 at 8.42.22 AM'), ('images/Screenshot20230510at85250AM.png', 'Screenshot 2023-05-10 at 8.52.50 AM')]\nmanifestlabel = '''test'''\ndst = os.path.join('img/derivatives/iiif/', 'test') + '/'\nbaseurl = os.path.join('https://dnoneill.github.io/annonatate/', dst)\ndata = []\nallfiles = []\nfor idx, filedict in enumerate(files):\n    file = filedict[0]\n    filepath,ext = file.rsplit('.', 1)\n    if ext == 'pdf':\n        images = convert_from_path(file)\n        for i in range(len(images)):\n            imagefilename = filepath + '-' + str(i) +'.jpg'\n            images[i].save(imagefilename, 'JPEG')\n            allfiles.append([imagefilename, filedict[1]])\n        os.remove(file)\n    elif ext != 'jpg' and ext != 'jpeg':\n        os.system('convert {} {}.jpg'.format(file, filepath))\n        allfiles.append(('%s.jpg'%filepath, filedict[1]))\n        os.remove(file)\n    else:\n        allfiles.append(filedict)\n\ndef convertImage(filedict):\n    file = filedict[0]\n    filepath,ext = file.rsplit('.', 1)\n    filename = os.path.basename(filepath)\n    if ext != 'jpg' and ext != 'jpeg':\n        os.system('convert {} {}.jpg'.format(file, filepath))\n    sg = IIIFStatic(prefix=baseurl, dst=dst)\n    sggenerate = sg.generate(file)\n    img = Image.open(file)\n    data.append((filename, img.width, img.height, os.path.join(baseurl, filename),'/full/full/0/default.jpg', filedict[1]))\n    iiiffulldir = os.path.join(dst, filename, 'full/full')\n    if not os.path.isdir(iiiffulldir):\n        os.mkdir(iiiffulldir)\n        iiiffulldir = os.path.join(iiiffulldir, '0')\n        os.mkdir(iiiffulldir)\n    else:\n        iiiffulldir = os.path.join(iiiffulldir, '0')\n    os.system('mv {} {}'.format(file, os.path.join(iiiffulldir, 'default.jpg')))\n    return done\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n    future_to_url = {executor.submit(convertImage, filedict): filedict for filedict in allfiles}\n    for future in concurrent.futures.as_completed(future_to_url):\n        print(future_to_url)\n    \n    iiifpapi3.BASE_URL = baseurl\nmanifest = iiifpapi3.Manifest()\nmanifest.set_id(extendbase_url='manifest.json')\nmanifest.add_label('en',manifestlabel)\nmanifest.add_behavior('paged')\ndescription = manifest.add_summary('en', '''''')\nmanifest.set_viewingDirection('left-to-right')\nrights = ''''''\nif rights:\n    try:\n        manifest.set_rights(rights)\n    except:\n        manifest.add_metadata('rights', rights, 'en', 'en')\n\ndata = tuple(data)\nfor idx,d in enumerate(data):\n    idx+=1\n    canvas = manifest.add_canvas_to_items()\n    canvas.set_id(extendbase_url='canvas/test-%s'%idx)\n    canvas.set_height(d[2])\n    canvas.set_width(d[1])\n    canvas.add_label('en', d[5])\n    filteredallfiles = [f for f in os.listdir(os.path.join(dst, d[0], 'full')) if f != 'full' and int(f.split(',')[0]) > 70]\n    filteredallfiles.sort()\n    size = filteredallfiles[0] if len(filteredallfiles) > 0 else '80,'\n    thumbnail = canvas.add_thumbnail()\n    thumbnail.set_id('{}/full/{}/0/default.jpg'.format(d[3], size))\n    annopage = canvas.add_annotationpage_to_items()\n    annopage.set_id(extendbase_url='page/p%s/1' %idx)\n    annotation = annopage.add_annotation_to_items(target=canvas.id)\n    annotation.set_id(extendbase_url='annotation/p%s-image'%str(idx).zfill(4))\n    annotation.set_motivation('painting')\n    annotation.body.set_id(''.join(d[3:5]))\n    annotation.body.set_type('Image')\n    annotation.body.set_format('image/jpeg')\n    annotation.body.set_width(d[1])\n    annotation.body.set_height(d[2])\n    s = annotation.body.add_service()\n    s.set_id(d[3])\n    s.set_type('ImageService2')\n    s.set_profile('level1')\n\nmanifestpath = os.path.join(dst, 'manifest.json')\nmanifest.json_save(manifestpath)\nheaderinfo = {}\nheaderinfo['title']= manifestlabel\nheaderinfo['added']= '''2023-05-11 17&#58;54&#58;23.204939'''\nheaderinfo['thumbnail'] = manifest.items[0].thumbnail[0].id\nfilecontents = open(manifestpath).read()\nwith open(manifestpath, 'w') as f:\n    f.write('''---\n{}---\n'''.format(yaml.dump(headerinfo)))\n    f.write(filecontents)\n